<?php

/**
 * @file
 * Implements hooks and callbacks for this module.
 */

// Doesn't make sense to use either of the Islandora RELS-EXT or RELS-INT
// namespaces, as our predicates can occur in both.
define('ISLANDORA_SCHOLAR_EMBARGO_RELS_URI', 'info:islandora/islandora-system:def/scholar#');
define('ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED', 'embargo-expiry-notification-date');
define('ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED', 'embargo-until');
define('ISLANDORA_EMBARGO_CAN_EMBARGO_OWNED', 'can embargo owned objects');
define('ISLANDORA_EMBARGO_CAN_EMBARGO_ANY', 'can embargo any object');

/**
 * Implements hook_menu().
 */
function islandora_scholar_embargo_menu() {
  $items['islandora/object/%islandora_object/manage/embargo'] = array(
    'title' => 'Embargo',
    'page callback' => 'islandora_scholar_embargo_object',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_scholar_access',
    'access arguments' => array(2),
  );
  $items['admin/islandora/embargo'] = array(
    'title' => 'Islandora Scholar Embargo',
    'description' => 'Configure the Embargo module.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_embargo_admin'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function islandora_scholar_embargo_permission() {
  return array(
    ISLANDORA_EMBARGO_CAN_EMBARGO_OWNED => array(
      'title' => t('Manage embargo on own objects'),
      'description' => t("User can add or remove embargo on their own objects only."),
    ),
    ISLANDORA_EMBARGO_CAN_EMBARGO_ANY => array(
      'title' => t('Manage embargo on any objects'),
      'description' => t("User can add or remove embargo on any obhect in repository."),
    ),
  );
}

/**
 * Returns access to menu path based on content mode and user permissions.
 *
 * @param AbstractObject $fedora_object
 *   The object to test.
 *
 * @return bool
 *   TRUE if access is allowed FALSE otherwise.
 */
function islandora_scholar_access($fedora_object = NULL) {
  $access = user_access(ISLANDORA_EMBARGO_CAN_EMBARGO_OWNED) ||
      user_access(ISLANDORA_EMBARGO_CAN_EMBARGO_ANY);
  $allowed_cmodels = variable_get('islandora_embargo_content_models', array('ir:citationCModel'));
  $rels = $fedora_object->relationships->get('info:fedora/fedora-system:def/model#', 'hasModel');
  $allowed = FALSE;
  foreach ($rels as $cmodel) {
    if (in_array($cmodel['object']['value'], $allowed_cmodels, $cmodel['object']['value'])) {
      $allowed = TRUE;
    }
  }
  return $access && $allowed;
}

/**
 * Build the array containing a couple tokens needed for mail messages.
 *
 * @param array $params
 *   Properties to include in the Mail tokens.
 *
 * @return array
 *   Mail tokens.
 */
function islandora_scholar_embargo_mail_tokens($params, $language) {
  global $base_url;
  $date = $params['expiry_date'] == 'indefinite' ? 'indefinite' : format_date(strtotime($params['expiry_date']));
  if ($params['expiry_date']) {
    $to_return = array(
      '!item' => l(
          $params['item_title'],
          'islandora/object' . $params['pid']
      ),
      '%dsid' => $params['dsid'],
      '%date' => $date,
      '!site' => $base_url,
    );
  }
  return $to_return;
}

/**
 * Implements hook_mail().
 *
 * Adds messages for pre_expiry and lifted_embargo.
 */
function islandora_scholar_embargo_mail($key, &$message, $params) {
  global $language;
  $variables = islandora_scholar_embargo_mail_tokens($params, 'English');

  switch ($key) {
    case 'pre_expiry':
      $message['subject'] = t('Notification from !site', $variables);
      if (empty($params['dsid']) && $params['dsid'] !== '0') {
        $message['body'][] = t('The embargo period for the object !item will expire on %date.', $variables);
      }
      else {
        $message['body'][] = t('The embargo period for the %dsid datastream on the object !item will expire on %date.', $variables);
      }
      break;

    case 'lifted_embargo':
      $message['subject'] = t('Notification from !site', $variables);
      if (empty($params['dsid']) && $params['dsid'] !== '0') {
        $message['body'][] = t('The embargo period for the object !item has expired, or the embargo has been manually lifted.', $variables);
      }
      else {
        $message['body'][] = t('The embargo period for the %dsid datastream on the object !item has expired, or the embargo has been manually lifted.');
      }
      break;
  }
}

/**
 * Implements hook_cron().
 *
 * Detect items whose embargo is either about to expire to notify or has expired
 * to lift.
 */
function islandora_scholar_embargo_cron() {
  // Detect embargos expiring son, send out notification.
  $now = time();
  $tomorrow = gmdate("Y-m-d\TH:i:s\Z", strtotime("+1DAYS", $now));
  $yesterday = gmdate("Y-m-d\TH:i:s\Z", strtotime("-1DAYS", $now));
  $pre_expiry = strtotime("-10DAYS", $now);
  $now = gmdate("Y-m-d\TH:i:s\Z", $now);
  $pre_expiry = gmdate("Y-m-d\TH:i:s\Z", $pre_expiry);

  $ise_uri = ISLANDORA_SCHOLAR_EMBARGO_RELS_URI;
  $eu = ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED;
  $np = ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED;
  $repository = new IslandoraTuque();
  $query = <<<EOQ
PREFIX is: <$ise_uri>
SELECT ?embargoed ?date ?notify
FROM <#ri>
WHERE {
  ?embargoed is:$eu ?date ;
             is:$np ?notify .
  FILTER(
    ?notify < '$now'^^xsd:dateTime &&
    ?date > '$pre_expiry'^^xsd:dateTime) .
}
EOQ;

  $results = $repository->repository->ri->sparqlQuery($query);

  foreach ($results as $result) {

    $full_pid = $result['embargoed']['value'];
    $pid_parts = explode('/', $full_pid);
    $params['pid'] = $pid_parts[0];
    $item = islandora_object_load($pid_parts[0]);
    $params['item_title'] = $item->label;
    $params['dsid'] = isset($pid_parts[1]) ? $pid_parts[1] : NULL;
    $params['expiry_date'] = $result['date']['value'];
    $params['notification_date'] = isset($result['notify']['value']) ? $result['notify']['value'] : NULL;
    $key = isset($result['notify']['value']) ? 'pre_expiry' : 'lifted_embargo';

    // Send emails here.
    islandora_embargo_user_notify($key, $item, $params);
  }

  // Lift expired embargos.
  $query = <<<EOQ
PREFIX is: <$ise_uri>
SELECT ?expired ?date
FROM <#ri>
WHERE {
  ?expired is:$eu ?date .
  FILTER(?date < '$tomorrow'^^xsd:dateTime) .
}
EOQ;
  $results = $repository->repository->ri->sparqlQuery($query);
  foreach ($results as $result) {
    $params = array();
    $full_pid = $result['expired']['value'];
    $pid_parts = explode('/', $full_pid);
    $params['pid'] = $pid_parts[0];
    $item = islandora_object_load($pid_parts[0]);
    $params['item_title'] = $item->label;
    $params['dsid'] = isset($pid_parts[1]) ? $pid_parts[1] : NULL;
    $params['expiry_date'] = $result['date']['value'];
    $params['notification_date'] = isset($result['notify']['value']) ? $result['notify']['value'] : NULL;
    $key = 'lifted_embargo';

    islandora_embargo_user_notify($key, $item, $params);
  }
}

/**
 * Implements hook_islandora_scholar_embargo_users_to_notify().
 */
function islandora_scholar_embargo_islandora_scholar_embargo_users_to_notify(AbstractObject $object) {
  $users = array(user_load(1));
  $owner = $object->owner;
  $owner = is_numeric($owner) ? user_load($owner) : user_load_by_name($owner);
  if ($owner) {
    $users[] = $owner;
  }
  return $users;
}

/**
 * Get info for the individuals to notify, in a format comparable to the $user.
 *
 * (An array of stdClasses, each of which contain at least an email property.)
 *
 * @param AbstractObject $object
 *   The owner of the given object will be notified.
 *
 * @return array
 *   An array of user objects to notify.
 */
function islandora_scholar_embargo_users_to_notify(AbstractObject $object) {
  $unique_users = function($user) {
    $seen = &drupal_static('islandora_scholar_embargo_users_to_notify_unique_users');
    if (isset($seen[$user->uid])) {
      return FALSE;
    }
    $seen[$user->uid] = TRUE;
    return TRUE;
  };
  $users = module_invoke_all('islandora_scholar_embargo_users_to_notify', $object);
  $users = array_filter($users, $unique_users);
  drupal_alter('islandora_scholar_embargo_users_to_notify', $users, $object);
  drupal_static_reset('islandora_scholar_embargo_users_to_notify_unique_users');
  $users = array_filter($users, $unique_users);
  return $users;
}

/**
 * Remove the embargo on the indicated item.
 *
 * The item embargoed is identified by both the pid and dsid values.
 *
 * @param string $pid
 *   A string containing a Fedora PID, which is either the item disembargoed,
 *   or the item in which the datastream to be embargoed exists.
 * @param mixed $dsid
 *   Either NULL--meaning the object should be disembargoed--or a string
 *   representing a datastream ID to be disembargoed.
 */
function islandora_scholar_embargo_lift_embargo($pid, $dsid = NULL) {
  $item = islandora_object_load($pid);
  $rels = $item->relationships->get(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED);
  $expiry = $rels[0]['object']['value'];
  $xacml = new IslandoraXacml($item);

  if ($dsid === NULL) {
    // TODO Remove embargo statement from RELS-EXT (and POLICY stream).
    $item->relationships->remove(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED);
    $item->relationships->remove(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED);
    $xacml->viewingRule->clear();
  }
  else {
    /* TODO Remove embargo statement from RELS-INT
     * (and POLICY stream) for the given datastream. */
    $item[$dsid]->relationships->remove(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED);
    $item[$dsid]->relationships->remove(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED);
    $xacml->datastreamRule->removeDsid($dsid);
  }

  $xacml->writeBackToFedora();

  // Send email notification.
  $params['pid'] = $pid;
  $params['item_title'] = $item->label;
  $params['dsid'] = isset($dsid) ? $dsid : NULL;
  $params['expiry_date'] = $expiry;
  $key = 'lifted_embargo';
  islandora_embargo_user_notify($key, $item, $params);
}

/**
 * Set an item to be embargoed.
 *
 * One oddity:  an $end of NULL will clear any embargo...  Only meant to be
 * used behind the scenes, to avoid triggering actions.
 *
 * @param string $pid
 *   A string containing a Fedora PID, which is either the item to be
 *   embargoed, or the item in which the datastream to be embargoed exists.
 * @param mixed $dsid
 *   Either NULL--meaning the object should be embargoed--or a string
 *   representing a datastream ID to be embargoed.
 * @param string $end
 *   Either an xsd:dateTime compliant string for when to lift the embargo, or
 *   the string 'indefinite' to require it to be manually lifted.
 */
function islandora_scholar_embargo_set_embargo($pid, $dsid = NULL, $end = 'indefinite') {
  $type = RELS_TYPE_PLAIN_LITERAL;
  $notification = NULL;
  // XXX We assume the end date is properly formatted...
  if ($end != 'indefinite' && $end !== NULL) {
    $type = RELS_TYPE_DATETIME;
    // XXX:  Make the notification interval configurable.
    $end = gmdate("Y-m-d\TH:i:s\Z", strtotime($end));
    $notification = gmdate("Y-m-d\TH:i:s\Z", strtotime('-10DAYS', strtotime($end)));
  }

  $item = islandora_object_load($pid);

  $xacml = new IslandoraXacml($item);
  $xacml_changed = FALSE;

  $users = islandora_scholar_embargo_users_to_notify($item);
  if ($dsid === NULL) {
    $item->relationships->remove(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED);
    $item->relationships->remove(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED);

    if ($end !== NULL) {
      $item->relationships->add(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED, $end, $type);

      if ($notification !== NULL) {
        $item->relationships->add(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED, $notification, $type);
      }
      foreach ($users as $user) {
        $xacml->viewingRule->addUser($user->name);
        $xacml_changed = TRUE;
      }
    }
  }
  else {

    $item[$dsid]->relationships->remove(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED);
    $item[$dsid]->relationships->remove(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED);

    $item[$dsid]->relationships->add(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED, $end, $type);
    if ($end !== NULL) {
      if ($notification !== NULL) {
        $item[$dsid]->relationships->add(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED, $notification, $type);
      }
      $xacml->datastreamRule->addDsid($dsid);
      $xacml_changed = TRUE;
      foreach ($users as $user) {
        $xacml->datastreamRule->addUser($user->name);
      }
    }
  }
  if ($xacml_changed) {
    $xacml->writeBackToFedora();
  }
}

/**
 * Get the embargo form.
 */
function islandora_scholar_embargo_object(AbstractObject $object) {
  module_load_include('inc', 'islandora_scholar_embargo', 'includes/embargo');
  return drupal_get_form('islandora_scholar_embargo_form', $object);
}

/**
 * Sends mail to users.
 *
 * @param array $params
 *   Array of parameters defining required behaviour.
 * @param string $key
 *   Defines required action.
 */
function islandora_scholar_embargo_send($params, $key) {
  $module = 'islandora_scholar_embargo';
  $to = $params['to'];
  $from = variable_get('site_mail', 'admin@example.com');
  $language = language_default();
  $send = TRUE;
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] == TRUE) {
    drupal_set_message(t('Notification has been sent to @to.', array('@to' => $to)), 'status', FALSE);
  }
  else {
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error', FALSE);
  }
}

/**
 * Send email notifications.
 *
 * @param string $key
 *   Key identifying operation type
 * @param IslandoraFedoraItem $item
 *   Tuque item representing object on which embargo is acting.
 * @param array $params
 *   Setup array of mail parameters
 */
function islandora_embargo_user_notify($key, $item, $params) {
  $users = islandora_scholar_embargo_users_to_notify($item);
  switch ($key) {
    case 'pre_expiry':
      $pred = ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED;
      break;

    case 'lifted_embargo':
      $pred = ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED;
      break;
  }

  foreach ($users as $user) {
    if (isset($user->mail)) {
      $params['to'] = $user->mail;
      islandora_scholar_embargo_send($params, $key);
    }
  }

  if ($params['dsid'] === NULL) {
    $item->relationships->remove(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, $pred);
  }
  else {
    $item[$params['dsid']]->relationships->remove(ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, $pred);
  }
}
