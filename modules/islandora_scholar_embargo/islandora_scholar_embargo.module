<?php

/**
 * @file
 *   This is the main module file for islandora_scholar_embargo.
 *   It supports embargo management in Islandora Scholar.
 */
/* Doesn't make sense to use either of the Islandora RELS-EXT or RELS-INT
 * namespaces, as our predicates can occur in both.
 */
define('ISLANDORA_SCHOLAR_EMBARGO_RELS_URI', 'info:islandora/islandora-system:def/scholar#');
define('ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED', 'embargo-expiry-notification-date');
define('ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED', 'embargo-until');

/**
 * Implements islandora_tabs().
 *
 * @param array $cms
 *   A list of content model objects.
 * @param string $pid
 *   The Fedora PID of the object that sparked the hook
 * @param int $page
 *   The page in collection view that the object is on.
 *
 * @return array
 *   The tabset to add to the object page.
 */
function islandora_scholar_embargo_islandora_tabs($cms, $pid, $page) {
  $tabset = array();

  $models = variable_get('islandora_scholar_models', 'ir:citationCModel');
  $models = explode(' ', $models);

  foreach ($cms as $cm) {
    if (in_array($cm->pid, $models)) {
      module_load_include('inc', 'islandora_scholar_embargo', 'embargo.tab');
      $tabset += EmbargoView::get_tabs($pid);
      break;
    }
  }

  return $tabset;
}

/**
 * Implement hook_menu()
 * @return array
 */

function islandora_scholar_embargo_menu() {
  $items = array();
  $items['manage/embargoed'] = array(
    'title' => t('Manage Embargoed Items'),
    'file' => 'management/embargo_manage.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('embargo_manage_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('manage embargoed items'),
  );

  return $items;
}

/**
 * Implements hook_perm
 * @return array
 */

function islandora_scholar_embargo_perm() {
  return array(
    'manage embargoed items',
  );
}

/**
 * Implements hook_theme().
 */
function islandora_scholar_embargo_theme() {
  return array(
    'embargo_manage_form' => array(
      'arguments' => array('element' => NULL),
      'file' => 'management/embargo_manage.inc',
    ),
  );
}

/**
 * Build the array containing a couple tokens needed for mail messages.
 *
 * @param array $params
 * @param $language
 *
 * @return array
 */
function islandora_scholar_embargo_mail_tokens($params, $language) {
  $to_return = array(
    '!item' => l(
        $params['item_title'],
        'fedora/repository/' . $params['item']
    ),
    '%dsid' => $params['dsid'],
    '%date' => format_date(strtotime($params['expiry_date'])),
  );

  return $to_return;
}

/**
 * Implements hook_mail().
 *
 * Adds messages for pre_expiry and lifted_embargo.
 */
function islandora_scholar_embargo_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = user_mail_tokens($params['account'], $language);
  $variables += islandora_scholar_mail_tokens($params, $language);

  switch ($key) {
    case 'pre_expiry':
      $message['subject'] = t('Notification from !site', $variables, $language->language);
      if (empty($params['dsid']) && $params['dsid'] !== '0') {
        $message['body'][] = t('The embargo period for the object !item will expire on %date.', $variables, $language->language);
      }
      else {
        $message['body'][] = t('The embargo period for the %dsid datastream on the object !item will expire on %date.', $variables, $language->language);
      }
      break;
    case 'lifted_embargo':
      $message['subject'] = t('Notification from !site', $variables, $language->language);
      if (empty($params['dsid']) && $params['dsid'] !== '0') {
        $message['body'][] = t('The embargo period for the object !item has expired, or the embargo has been manually lifted.', $variables, $language->language);
      }
      else {
        $message['body'][] = t('The embargo period for the %dsid datastream on the object !item has expired, or the embargo has been manually lifted.', $variables, $language->language);
      }
      break;
  }
}

/**
 * Implements hook_cron().
 *
 * Detect items whose embargo is either about to expire to notify or has expired
 * to lift.
 */
function islandora_scholar_embargo_cron() {
  if (module_exists('trigger')) {
    module_load_include('inc', 'fedora_repository', 'ObjectHelper');
    $now = time();
    $pre_expiry = strtotime("-10DAYS", $now);
    $now = gmdate("Y-m-d\TH:i:s\Z", $now);
    $pre_expiry = gmdate("Y-m-d\TH:i:s\Z", $pre_expiry);

    $ise_uri = ISLANDORA_SCHOLAR_EMBARGO_RELS_URI;
    $eu = ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED;
    $np = ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED;

    $results = ObjectHelper::performSparqlQuery(<<<EOQ
PREFIX is: <$ise_uri>
SELECT ?embargoed ?date
FROM <#ri>
WHERE {
  ?embargoed is:$eu ?date ;
             is:$np ?notify .
  FILTER(sameTerm(dataType(?date), xsd:dateTime) &&
    ?notify < $now^^xsd:dateTime &&
    ?date > $now^^xsd:dateTime) .
}
EOQ
    );

    module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
    module_load_include('inc', 'fedora_repository', 'api/fedora_item');
    foreach ($results as $result) {
      $pid = $result['embargoed'];
      $dsid = NULL;
      if (!valid_pid($pid)) {
        list($pid, $dsid) = explode('/', $pid);
      }
      $item = new Fedora_Item($pid);
      $context = array(
        'hook' => 'islandora_scholar_embargo',
        'op' => 'pre_expiry',
        'islandora_scholar_embargo' => array(
          'dsid' => $dsid,
          'expiry_date' => $result['date'],
        ),
      );

      if ($dsid === NULL) {
        $item->purge_relationships(
            ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED,
            NULL,
            ISLANDORA_SCHOLAR_EMBARGO_RELS_URI
        );
      }
      else {
        $item->purge_dsid_relationships(
            $dsid,
            ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED,
            NULL,
            ISLANDORA_SCHOLAR_EMBARGO_RELS_URI
        );
      }
    }

    $results = ObjectHelper::performSparqlQuery(<<<EOQ
PREFIX is: <$ise_uri>
SELECT ?expired ?date
FROM <#ri>
WHERE {
  ?expired is:$eu ?date .
  FILTER(sameTerm(dataType(?date), xsd:dateTime) && ?date <= $now^^xsd:dateTime) .
}
EOQ
    );

    foreach ($results as $result) {
      $pid = $result['embargoed'];
      $dsid = NULL;
      if (!valid_pid($pid)) {
        list($pid, $dsid) = explode('/', $pid);
      }
      $item = new Fedora_Item($pid);
      $context = array(
        'hook' => 'islandora_scholar_embargo',
        'op' => 'expiry',
        'islandora_scholar_embargo' => array(
          'dsid' => $dsid,
          'expiry_date' => $result['date'],
        ),
      );

      // Fire "expiry" trigger.
      actions_do(_trigger_get_hook_aids('islandora_scholar_embargo', 'expiry'), $item, $context);
    }
  }
}

/**
 * Get info for the individuals to notify,
 * in a format comparable to the $user global...
 *
 * (An array of stdClasses, each of which contain at least an email property.)
 *
 * @param string $pid
 *
 * @return array
 */
function islandora_scholar_embargo_islandora_scholar_embargo_users_to_notify($pid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);

  $owner = $item->objectProfile->ownerId;
  if (!is_numeric($owner)) {
    /* If it's not numeric (which will be used as a uid),
     * then assume it's a username. */
    $owner = array(
      'name' => $owner,
    );
  }

  $users = array(
    user_load(1),
    user_load($owner),
  );

  foreach ($users as $key => $user) {
    if ($user && intval($user->uid) === 0) {
      // Failed to load, assigned anonymous...
      $users[$key] = FALSE;
    }
  }

  return $users;
}

/**
 * Action which sends a pre-expiry notification.
 *
 * The users to notify are provided by
 * hook_islandora_scholar_embargo_users_to_notify()
 *
 * @param object $object
 *   A Fedora_Item representing item expiring.
 * @param array $context
 */
function islandora_scholar_embargo_pre_expiry_mail_action(&$object, $context) {
  $to_notify = module_invoke_all('islandora_scholar_embargo_users_to_notify', $object->pid);

  foreach ($to_notify as $to) {
    // user_load can return FALSE.
    if ($to) {
      $language = user_preferred_language($to);
      drupal_mail('islandora_scholar_embargo', 'pre_expiry', $to->email, $language, array(
        'item' => $object->pid,
        'item_title' => $object->objectProfile->objLabel,
        'dsid' => $context['islandora_scholar_embargo']['dsid'],
        'expiry_date' => $context['expiry_date'],
      ));
    }
  }
}

/**
 * Remove the embargo on the indicated item.
 *
 * The item embargoed is identified by both the pid and dsid values.
 *
 * @param string $pid
 *   A string containing a Fedora PID, which is either the item disembargoed,
 *   or the item in which the datastream to be embargoed exists.
 * @param mixed $dsid
 *   Either NULL--meaning the object should be disembargoed--or a string
 *   representing a datastream ID to be disembargoed.
 */
function islandora_scholar_embargo_lift_embargo($pid, $dsid = NULL) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'islandora_xacml_api', 'IslandoraXacml');
  $item = new Fedora_Item($pid);
  $xacml = new IslandoraXacml($pid);

  if ($dsid === NULL) {
    // TODO Remove embargo statement from RELS-EXT (and POLICY stream).
    $item->purge_relationships(ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED, NULL, ISLANDORA_SCHOLAR_EMBARGO_RELS_URI);
    $item->purge_relationships(ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED, NULL, ISLANDORA_SCHOLAR_EMBARGO_RELS_URI);
    $xacml->viewingRule->clear();
  }
  else {
    /* TODO Remove embargo statement from RELS-INT
     * (and POLICY stream) for the given datastream. */
    $item->purge_dsid_relationships($dsid, ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED, NULL, ISLANDORA_SCHOLAR_EMBARGO_RELS_URI);
    $item->purge_dsid_relationships($dsid, ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED, NULL, ISLANDORA_SCHOLAR_EMBARGO_RELS_URI);
    $xacml->datastreamRule->removeDsid($dsid);
  }

  $xacml->writeBackToFedora();

  $context = array(
    'hook' => 'islandora_scholar_embargo',
    'op' => 'lifted_embargo',
    'islandora_scholar_embargo' => array(
      'dsid' => $dsid,
    ),
  );

  if (module_exists('trigger')) {
    // Pull trigger.
    actions_do(_trigger_get_hook_aids('islandora_scholar_embargo', 'lifted_embargo'), $item, $context);
  }
}

/**
 * Set an item to be embargoed.
 *
 * One oddity:  an $end of NULL will clear any embargo...  Only meant to be
 * used behind the scenes, to avoid triggering actions.
 *
 * @param string $pid
 *   A string containing a Fedora PID, which is either the item to be
 *   embargoed, or the item in which the datastream to be embargoed exists.
 * @param mixed $dsid
 *   Either NULL--meaning the object should be embargoed--or a string
 *   representing a datastream ID to be embargoed.
 * @param string $end
 *   Either an xsd:dateTime compliant string for when to lift the embargo, or
 *   the string 'indefinite' to require it to be manually lifted.
 */
function islandora_scholar_embargo_set_embargo($pid, $dsid = NULL, $end = 'indefinite') {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'islandora_xacml_api', 'IslandoraXacml');

  $type = RELS_TYPE_PLAIN_LITERAL;
  $notification = NULL;
  // XXX We assume the end date is properly formatted...
  if ($end != 'indefinite' && $end !== NULL) {
    $type = RELS_TYPE_DATETIME;
    // XXX:  Make the notification interval configurable.
    $end = gmdate("Y-m-d\TH:i:s\Z", strtotime($end));
    $notification = gmdate("Y-m-d\TH:i:s\Z", strtotime('-10DAYS', strtotime($end)));
  }

  $item = new Fedora_Item($pid);
  $xacml = new IslandoraXacml($pid);
  $xacml_changed = FALSE;

  $users = module_invoke_all('islandora_scholar_embargo_users_to_notify', $pid);

  if ($dsid === NULL) {
    $item->purge_relationships(ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED, NULL, ISLANDORA_SCHOLAR_EMBARGO_RELS_URI);
    $item->purge_relationships(ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED, NULL, ISLANDORA_SCHOLAR_EMBARGO_RELS_URI);

    if ($end !== NULL) {
      $item->add_relationship(ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED, $end, ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, $type);

      if ($notification !== NULL) {
        $item->add_relationship(ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED, $notification, ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, $type);
      }
      foreach ($users as $user) {
        if ($user) {
          $xacml->viewingRule->addUser($user->name);
          $xacml_changed = TRUE;
        }
      }
    }
  }
  else {
    $item->purge_dsid_relationships($dsid, ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED, NULL, ISLANDORA_SCHOLAR_EMBARGO_RELS_URI);
    $item->purge_dsid_relationships($dsid, ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED, NULL, ISLANDORA_SCHOLAR_EMBARGO_RELS_URI);
    $item->add_dsid_relationship($dsid, ISLANDORA_SCHOLAR_EMBARGO_EXPIRY_PRED, $end, ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, $type);

    if ($end !== NULL) {
      if ($notification !== NULL) {
        $item->add_dsid_relationship($dsid, ISLANDORA_SCHOLAR_EMBARGO_NOTIFICATION_PRED, $notification, ISLANDORA_SCHOLAR_EMBARGO_RELS_URI, $type);
      }
      $xacml->datastreamRule->addDsid($dsid);
      $xacml_changed = TRUE;
      foreach ($users as $user) {
        if ($user) {
          $xacml->datastreamRule->addUser($user->name);
        }
      }
    }
  }
  if ($xacml_changed) {
    $xacml->writeBackToFedora();
  }
}

/**
 * A Drupal Action set up to run through
 * islandora_scholar_embargo_action_info().
 *
 * Makes the embargo for the given object get lifted.
 *
 * @param object $object
 *   A reference to a Fedora_Item.
 * @param array $context
 *   Some context with which this trigger was called.
 */
function islandora_scholar_embargo_lift_expired_embargo_action(&$object, $context) {
  islandora_scholar_embargo_lift_embargo($object->pid, $context['islandora_scholar_embargo']['dsid']);
}

/**
 * Implements hook_action_info().
 */
function islandora_scholar_embargo_action_info() {
  return array(
    'islandora_scholar_embargo_pre_expiry_mail_action' => array(
      'type' => 'islandora_scholar_embargo',
      'description' => t('Embargo pre-expiry notification'),
      'hooks' => array('islandora_scholar_embargo' => array('pre_expiry')),
    ),
    'islandora_scholar_embargo_lift_expired_embargo_action' => array(
      'type' => 'islandora_scholar_embargo',
      'description' => t('Lift embargo'),
      'hooks' => array('islandora_scholar_embargo' => array('expiry')),
    ),
    'islandora_scholar_embargo_expired_mail_action' => array(
      'type' => 'islandora_scholar_embargo',
      'description' => t('Embargo lift notification'),
      'hooks' => array('islandora_scholar_embargo' => array('lifted_embargo')),
    ),
  );
}

/**
 * Implements hook_hook_info().
 */
function islandora_scholar_embargo_hook_info() {
  return array(
    'islandora_scholar_embargo' => array(
      'islandora_scholar_embargo' => array(
        'pre_expiry' => array(
          'runs when' => t('After detecting an item on which the embargo will soon expire'),
        ),
        'expiry' => array(
          'runs when' => t('After detecting an item on which the embargo should be lifted'),
        ),
        'lifted_embargo' => array(
          'runs when' => t('After lifing the embargo from an item'),
        ),
      ),
    ),
  );
}
