<?php

/**
 * @file
 *
 * Implements hooks and callbacks for this module.
 */

define('MENU_BIBLIOGRAPHY_HOME', 'islandora/bibliography');
define('MENU_BIBLIOGRAPHY_CITATION', 'islandora/bibliography/citation');

/**
 * The menu entries for this module.
 *
 * @return $menu_entries
 *   An arrray of the items to be added to the drupal menu
 */
function islandora_bibliography_menu() {
  $items = array();
  $items['islandora/bibliography/preview'] = array(
    'page callback' => 'islandora_bibliography_preview_form',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements islandora_bookmark_object_markup().
 *
 * @param type FedoraObject $fedora_object
 *   A FedoraObject.
 *
 * @return type
 *   The markup for the citation.
 */
function islandora_bibliography_ir_citationCModel_islandora_bookmark_object_markup($fedora_object) {
  $title_author = islandora_bibilography_get_title_authors($fedora_object->id);
  $markup = array(
    'title' => array(
      '#markup' => l($title_author['title'], 'islandora/object/' . $fedora_object->id)
    ),
    'author' => array(
      '#markup' => '<br/>' . $title_author['authors']
    )
  );
  return drupal_render($markup);
}

/**
 * Get the title and author of a given citation.
 *
 * @param string $pid
 *   A citations within the bibliography.
 *
 * @return array
 *   Where the first key is the title and the second is the authors.
 */
function islandora_bibilography_get_title_authors($pid) {
  $title = $pid;
  $authors = '';
  $mods = islandora_bibliography_get_mods($pid);
  if ($mods) {
    $mods = simplexml_import_dom($mods);
    $mods->registerXPathNamespace('mods', 'http://www.loc.gov/mods/v3');
    $title = implode(' ', $mods->xpath('/mods:mods/mods:titleInfo/mods:title'));
    $authors_xpath = $mods->xpath('/mods:mods/mods:name/mods:role[mods:roleTerm = "author"]/../mods:namePart[@type="family"]');
    $authors = is_array($authors_xpath) ? implode(' ', $authors_xpath) : NULL;
  }
  return array('title' => $title, 'authors' => $authors);
}

/**
 * Gets the MODS from an object.
 *
 * Helper function for getting the MODS metadata.
 *
 * @param string $pid
 *   The fedora object to get the MODS from.
 *
 * @return DOMDocument
 *   An MODS document if found and non-empty, FALSE otherwise.
 */
function islandora_bibliography_get_mods($pid) {
  $object = islandora_object_load($pid);

  if (!isset($object)) {
    return FALSE;
  }

  if ($object['MODS']) {
    $mods_str = trim($object['MODS']->content);
    $doc = new DOMDocument();
    $doc->loadXML($mods_str);
    return $doc;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements islandora_bookmark_export_handler().
 *
 * @return array
 *   The citation export options available from the exporter module.
 */
function islandora_bibliography_islandora_bookmark_export_handler() {
  $formats = islandora_bibliography_get_export_formats();
  foreach ($formats as $key => $value) {
    $biblio_export['Bibliography'][$key] = 'citation_exporter_batch_export_' . drupal_strtolower($key);
  }
  return $biblio_export;
}

/**
 * Implements islandora_bookmark_export_styles().
 *
 * @param type $option
 *   The selected format that we are retrieving styles for.
 *
 * @return array
 *   An associative array containing any avaialble styles for the current format.
 */
function islandora_bibliography_islandora_bookmark_export_styles($option) {
  if (array_key_exists($option, islandora_bibliography_get_export_formats()) && $option != 'RIS') {
    return islandora_bibliography_get_export_styles();
  }
}

/**
 * Grab available styles from CSL for use in exporting.
 *
 * @return type
 */
function islandora_bibliography_get_export_styles() {
  $styles = CSL::GetNames();
  return $styles;
}

/**
 * Provide the list of export formats available for use with islandora_bookmark
 * integration.
 *
 * @return string
 */
function islandora_bibliography_get_export_formats() {
  $options = array(
      'RIS' => 'RIS (Endnote format)',
      'RTF' => 'RTF (word proccessor format)',
      'PDF' => 'PDF',
  );
  return $options;
}

/**
 * Alters the islandora_bookmark_detailed_form such that a preview button is
 * visible for options that have styles associated with them. Yay #states!
 *
 * @param type $form
 * @param type $form_state
 */
function islandora_bibliography_form_islandora_bookmark_detailed_form_alter(&$form, &$form_state) {
  if (array_key_exists('islandora_bookmark_export', $form_state)) {
    $form['bookmarks']['fieldset']['format_opts']['preview_selected'] = array(
      '#type' => 'submit',
      '#value' => t('Preview selected'),
      '#submit' => array('islandora_bibliography_preview_selected'),
      '#weight' => 7,
      '#name' => 'islandora_bibliography_preview',
    );
    foreach (islandora_bibliography_get_export_formats() as $key => $value) {
      if ($key !== 'RIS') {
        $form['bookmarks']['fieldset']['format_opts']['preview_selected']['#states']['invisible'][':input[name="islandora_bookmark_export_styles_' . $key . '"]'] = array('invisible' => TRUE);
      }
    }
  }
}

/**
 * Submit handler which stores values in the $_SESSION to be used when generating
 * an HTML preview of our citation(s).
 *
 * @param type $form
 * @param type $form_state
 */
function islandora_bibliography_preview_selected(&$form, &$form_state) {
  $pids = array();

  foreach ($form_state['values']['bookmarks']['fieldset']['table'] as $checkbox => $value) {
    if ($value !== 0) {
    // Make sure we can actually access the object
      if (islandora_object_load($value)) {
        $pids[] = $value;
      }
    }
  }

  $queries = $_GET;
  unset($queries['q']);
  if (count($pids)) {
    $format = $form_state['input']['islandora_bookmark_export_options_select'];
    $_SESSION['islandora_bibliography_preview']['style'] = $form_state['input']['islandora_bookmark_export_styles_' . $format];
    $_SESSION['islandora_bibliography_preview']['pids'] = serialize($pids);
    $_SESSION['islandora_bibliography_preview']['queries'] = serialize($queries);
    $_SESSION['islandora_bibliography_preview']['path'] = request_path();
    drupal_goto('islandora/bibliography/preview');
  }
  else {
    drupal_set_message(t('No citations were selected!'), 'warning');
  }
}

/**
 * Generates a preview of the citation for viewing in browser.
 *
 * @return type
 *   Rendered citations in HTML format.
 */
function islandora_bibliography_preview_form() {
  drupal_add_css(drupal_get_path('module', 'islandora_bibliography') . '/css/export.css');

  $style = citeproc_style($_SESSION['islandora_bibliography_preview']['style']);
  $output = '';

  $bibliography_entries = array();

  foreach (unserialize($_SESSION['islandora_bibliography_preview']['pids']) as $pid) {
    $mods = islandora_bibliography_get_mods($pid);
    if ($mods) {
      $bibliography_entries[] = citeproc_bibliography_from_mods($style, $mods);
    }
  }

  drupal_set_title(t('Export preview'));

  //XXX: May have to implode with a line-break?
  $output = implode($bibliography_entries, '');
  $output .= l(t('Return to the previous page.'), $_SESSION['islandora_bibliography_preview']['path'], array('query' => unserialize($_SESSION['islandora_bibliography_preview']['queries'])));
  $form = array(
    '#markup' => $output
  );
  unset($_SESSION['islandora_bibliography_preview']['style']);
  unset($_SESSION['islandora_bibliography_preview']['pids']);
  unset($_SESSION['islandora_bibliography_preview']['path']);
  unset($_SESSION['islandora_bibliography_preview']['queries']);
  return drupal_render($form);
}
