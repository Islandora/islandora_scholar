<?php

/**
 * @file
 * Implements hooks and callbacks for this module.
 */

/**
 * Implements hook_menu().
 */
function islandora_bibliography_menu() {
  $items = array();
  $items['islandora/bibliography/preview'] = array(
    'page callback' => 'islandora_bibliography_preview',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_islandora_bookmark_object_markup().
 */
function islandora_bibliography_ir_citationCModel_islandora_bookmark_object_markup(AbstractObject $object) {
  $style = citeproc_default_style();
  $mods = islandora_bibliography_get_mods($object->id);
  if ($mods) {
    $bibliography_entry = citeproc_bibliography_from_mods($style, $mods);
  }
  $output = l($object->label, 'islandora/object/' . $object->id) . '<br />';
  $output .= $bibliography_entry;
  return $output;
}

/**
 * Implements hook_islandora_bookmark_rss_item().
 */
function islandora_bibliography_ir_citationCModel_islandora_bookmark_rss_item(AbstractObject $object) {

  // Global variables.
  global $base_url;

  // Create an associative array for the required elements
  // for a valid bookmark RSS item.
  $rss_item = array();

  // Get the citeproc default style.
  $style = citeproc_default_style();
  // Get the mods datastream.
  $mods = islandora_bibliography_get_mods($object->id);
  // If mods exists then create bibliography from mods.
  if ($mods) {
    $bibliography_entry = citeproc_bibliography_from_mods($style, $mods);

    // The title of the item will be the objects label.
    $rss_item['title'] = $object->label;
    // The link will be to the objects page.
    $rss_item['link'] = url('islandora/object/' . htmlspecialchars($object->id, ENT_QUOTES, 'utf-8'), array('absolute' => TRUE));
    // The description will be the bibliography entry.
    $rss_item['description'] = $bibliography_entry;

    // Get the site name to be the value of the source.
    $rss_source = variable_get('site_name', "Default site name");

    // Set the default source attribute to be to be the base url.
    $rss_item['items'] = array(
      array(
        'key' => 'source',
        'value' => $rss_source, 'attributes' => array('url' => $base_url)),
    );
  }

  // Returns the the rss default item.
  return $rss_item;
}

/**
 * Get the title and author of a given citation.
 *
 * @param string $pid
 *   A citations within the bibliography.
 *
 * @return array
 *   Where the first key is the title and the second is the authors.
 */
function islandora_bibilography_get_title_authors($pid) {
  $title = $pid;
  $authors = '';
  $mods = islandora_bibliography_get_mods($pid);
  if ($mods) {
    $mods = simplexml_import_dom($mods);
    $mods->registerXPathNamespace('mods', 'http://www.loc.gov/mods/v3');
    $title = implode(' ', $mods->xpath('/mods:mods/mods:titleInfo/mods:title'));
    $authors_xpath = $mods->xpath('/mods:mods/mods:name/mods:role[mods:roleTerm = "author"]/../mods:namePart[@type="family"]');
    $authors = is_array($authors_xpath) ? implode(' ', $authors_xpath) : NULL;
  }
  return array('title' => $title, 'authors' => $authors);
}

/**
 * Gets the MODS from an object.
 *
 * Helper function for getting the MODS metadata.
 *
 * @param string $pid
 *   The fedora object to get the MODS from.
 *
 * @return DOMDocument
 *   An MODS document if found and non-empty, FALSE otherwise.
 */
function islandora_bibliography_get_mods($pid) {
  $object = islandora_object_load($pid);

  if (isset($object) && isset($object['MODS']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $object['MODS'])) {
    $mods_str = trim($object['MODS']->content);
    $doc = new DOMDocument();
    $doc->loadXML($mods_str);
    return $doc;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements islandora_bookmark_export_handler().
 *
 * @return array
 *   The citation export options available from the exporter module.
 */
function islandora_bibliography_islandora_bookmark_export_handler() {
  $formats = islandora_bibliography_get_export_formats();
  foreach ($formats as $key => $value) {
    $biblio_export['Bibliography'][$key] = 'citation_exporter_batch_export_' . drupal_strtolower($key);
  }
  return $biblio_export;
}

/**
 * Implements islandora_bookmark_export_styles().
 */
function islandora_bibliography_islandora_bookmark_export_styles($option) {
  if (array_key_exists($option, islandora_bibliography_get_export_formats()) && $option != 'RIS') {
    return islandora_bibliography_get_export_styles();
  }
}

/**
 * Grab available styles from CSL for use in exporting.
 *
 * @return array
 *   An array of defined style's names, where both the key and the value are the
 *   style's name.
 */
function islandora_bibliography_get_export_styles() {
  $styles = CSL::GetNames();
  return $styles;
}

/**
 * Provide the list of export formats available for use with islandora_bookmark.
 *
 * @return array
 *   An associative array where the keys are formats this module recognizes and
 *   the values are human readable formats.
 */
function islandora_bibliography_get_export_formats() {
  $options = array(
    'RIS' => 'RIS (Endnote format)',
    'RTF' => 'RTF (word proccessor format)',
    'PDF' => 'PDF',
  );
  return $options;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the islandora_bookmark_detailed_form such that a preview button is
 * visible for options that have styles associated with them. Yay #states!
 */
function islandora_bibliography_form_islandora_bookmark_detailed_form_alter(array &$form, array &$form_state) {
  if (array_key_exists('islandora_bookmark_export', $form_state)) {
    $form['bookmarks']['fieldset']['format_opts']['preview_selected'] = array(
      '#type' => 'submit',
      '#value' => t('Preview selected'),
      '#submit' => array('islandora_bibliography_preview_selected'),
      '#weight' => 7,
      '#name' => 'islandora_bibliography_preview',
    );
    foreach (islandora_bibliography_get_export_formats() as $key => $value) {
      if ($key !== 'RIS') {
        $form['bookmarks']['fieldset']['format_opts']['preview_selected']['#states']['invisible'][':input[name="islandora_bookmark_export_styles_' . $key . '"]'] = array('invisible' => TRUE);
      }
    }
  }
}

/**
 * Modifies the $_SESSION to store values for previewing citation(s).
 *
 * @param array $form
 *   The Drupal form definition.
 * @param array $form_state
 *   The Drupal form state.
 */
function islandora_bibliography_preview_selected(array $form, array &$form_state) {
  $pids = array();
  foreach ($form_state['values']['bookmarks']['fieldset']['table'] as $checkbox => $value) {
    if ($value !== 0) {
      // Make sure we can actually access the object.
      if (islandora_object_load($value)) {
        $pids[] = $value;
      }
    }
  }
  if (count($pids)) {
    $format = $form_state['input']['islandora_bookmark_export_options_select'];
    $_SESSION['islandora_bibliography_preview']['style'] = $form_state['input']['islandora_bookmark_export_styles_' . $format];
    $_SESSION['islandora_bibliography_preview']['pids'] = serialize($pids);
    drupal_goto('islandora/bibliography/preview');
  }
  else {
    drupal_set_message(t('No citations were selected!'), 'warning');
  }
}

/**
 * Generates a preview of the citation for viewing in browser.
 *
 * @return string
 *   Rendered citations in HTML format.
 */
function islandora_bibliography_preview() {
  drupal_set_title(t('Export preview'));
  drupal_add_css(drupal_get_path('module', 'islandora_bibliography') . '/css/islandora_bibliography.css');
  $preview = isset($_SESSION['islandora_bibliography_preview']) ? $_SESSION['islandora_bibliography_preview'] : NULL;
  $return_link = l(t('Return to the previous page.'), 'javascript:window.history.back();', array('external' => TRUE));
  if (!$preview) {
    return $return_link;
  }
  $output = array();
  $style = citeproc_style($preview['style']);
  foreach (unserialize($preview['pids']) as $pid) {
    $mods = islandora_bibliography_get_mods($pid);
    if ($mods) {
      $output[] = array(
        '#prefix' => '<div>',
        '#markup' => citeproc_bibliography_from_mods($style, $mods),
        '#suffix' => '</div><br/>',
      );
    }
  }
  $output[] = array(
    '#markup' => $return_link,
  );
  return drupal_render($output);
}
